1 100 0
1 100 1
1 74 0
2 100 1
0 21 1
2 74 0--lr

1 100 0
1 100 1
1 74 0
2 100 1
0 21 1
3 100 1 ----5


BSTNode* inserthelp(BSTNode* root, int key) {//aqui
	
	if (root == NULL) return create_bstnode(key);
	if (key < root->key) {
		root->left = inserthelp(root->left, key);
		root->leftChildrenCount++;
        //printf("%d ", root->leftChildrenCount);
	}
	else if (key > root -> key) {
		root -> right = inserthelp(root->right, key);
		root->rightChildrenCount++;
        //printf("%d ", root->rightChildrenCount);
	}
	else return root;

    //printf("%d %d %d\n", root->leftChildrenCount, root->key, root->rightChildrenCount);

	root -> height = max( h(root ->left), h(root->right) ) + 1;

	int balance = getBalance(root);

	// 4 cases for unbalanced node
	if ( (balance > 1) && (key<root->left->key) ) return right_rotate(root);

	if ( (balance < -1) && (key>root->right->key) ) return left_rotate(root);

	if ( (balance > 1) && (key>root->left->key) ) {
		root->left = left_rotate(root->left);
		return right_rotate(root);
	}

	if ( (balance < -1) && (key<root->right->key) ) {
		root -> right = right_rotate(root->right);
		return left_rotate(root);
	}

    printf("%d %d %d\n", root->leftChildrenCount, root->key, root->rightChildrenCount);


	return root;
}

BSTNode* insert(BSTNode* rt, int k){//aqui

    rt = inserthelp(rt, k);
    return (rt);
}

100
100
100
100
74

100
100
100
100
100


100
h:0 b:0
100
h:0 b:0
100
h:0 b:0
h:1 b:1
100
h:0 b:0
h:1 b:1
h:2 b:2
74

100
h:2 k:100 b:1
100
h:2 k:100 b:0
100
h:2 k:74 b:1
h:3 k:100 b:1
100
h:2 k:21 b:-1
h:3 k:74 b:2
h:3 k:100 b:1
100

100
h:0 k:100 b:0
100
h:0 k:100 b:0
100
h:0 k:74 b:0
h:1 k:100 b:1
100
h:0 k:21 b:0
h:1 k:74 b:1
h:2 k:100 b:2
74


